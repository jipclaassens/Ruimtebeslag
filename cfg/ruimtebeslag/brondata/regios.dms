container regios : using = "geometries"
{
	container nederland
	{
		unit<uint32> src 
		:	StorageName     = "%AltSourceDataDir%/CBS/Nederland.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		, 	DialogData = "rdc"
		{
			attribute<geometries/rdc> geometry (polygon) ;
			attribute<string>         name               := const('NL',.);
			attribute<src> grid   (rdc_100m) := poly2grid(geometry, rdc_100m);
			attribute<bool> 	IsNederland (rdc_100m) := IsDefined(grid);
			attribute<uint8> IsNederland_8 (rdc_100m) := IsNederland ? 1[uint8] : (0/0)[uint8];
		}
		
		unit<uint32> NL_BoundingBox : nrofrows = 1
		{
			parameter<geometries/rdc_mm>  union_buurten    (poly)     := /Brondata/regios/buurten/src_2019/IsLand/union;
			parameter<geometries/rdc_mm>  BoudingBox_minus_NL (poly)   := union_polygon - union_buurten;
			
			unit<uint32> OutsideNL : nrofrows = 1
			{
				attribute<geometries/rdc> geometry (poly) := union_data(.,BoudingBox_minus_NL[geometries/rdc]);
			}
		
			parameter<m> x_min  := 0[m];
			parameter<m> x_max  := 280000[m]; 
			parameter<m> y_min  := 300000[m];
			parameter<m> y_max  := 625000[m];
			
			parameter<geometries/rdc> top_left     := point(x_min,y_max, geometries/rdc);
			parameter<geometries/rdc> top_right    := point(x_max,y_max, geometries/rdc);
			parameter<geometries/rdc> bottom_left  := point(x_min,y_min, geometries/rdc);
			parameter<geometries/rdc> bottom_right := point(x_max,y_min, geometries/rdc);
			
			unit<uint32>              point_set    : nrofrows = 5
			{
				attribute<geometries/rdc>      point        := union_data(., top_left, top_right, bottom_right, bottom_left, top_left);
				attribute<NL_BoundingBox> sequence_rel := const(0, .);
				attribute<.>              ordinal      := id(.);
			}
			
			attribute<geometries/rdc>       polygon (poly)      := points2sequence(point_set/point, point_set/sequence_rel, point_set/ordinal);
			parameter<geometries/rdc_mm>    union_polygon (poly) := union_polygon(polygon[geometries/rdc_mm]);
		}
		
		
	}
	
	container Randstad
	{
		unit<uint32> src 
			:	StorageName     = "%AltSourceDataDir%/CBS/Randstad.shp"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<geometries/rdc> geometry (polygon) ;
				attribute<src> grid   (rdc_100m) := poly2grid(geometry, rdc_100m);
				attribute<bool> IsRandstad   (rdc_100m) := grid == 1;
			}
	}
	container provincies
	{
		unit<uint32> src_2012 
		:	StorageName     = "%AltSourceDataDir%/CBS/2012/CBS_Provincie_2012.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc>   geometry  (polygon) ;
			attribute<string>           label                      := statnaam ;
			attribute<src_2012>         grid      (rdc_100m) := poly2grid(geometry, rdc_100m);
			attribute<procent>	bouwkosten_regionaal : [.95, .93, .92, .93, .96, .94, 1, .99, 1, .95, .93, .90];
			attribute<procent>	bouwkosten_regionaal_grid (rdc_100m) := bouwkosten_regionaal[grid];
		}
	}
	container grootstedelijke_agglomeratie
	{
		unit<uint32> src_2012 
		:	StorageName     = "%AltSourceDataDir%/CBS/2012/CBS_grootstedelijke_agglomeratie_2012.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc>   geometry  (polygon) ;
			attribute<string>           label                      := statnaam ;
			attribute<src_2012>         grid      (rdc_100m) := poly2grid(geometry, rdc_100m);
			attribute<procent>	bouwkosten_stedelijk : [1, 1.04, 1.04, 1.04, 1.04, 1.04, 1.04, 1.04, 1.04, 1.04, 1.04, 1.04, 1.04, 1.04, 1.04, 1.04, 1.04, 1.04, 1.04, 1.04, 1.04, 1.04, 1.04];
			attribute<procent>	bouwkosten_stedelijk_grid (rdc_100m) := bouwkosten_stedelijk[grid];
		}
	}
	container corop
	{
		unit<uint32> src_2012 
		:	StorageName     = "%AltSourceDataDir%/CBS/2012/CBS_COROP_2012.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc>   geometry  (polygon) ;
			attribute<string>           label                      := statnaam ;
			attribute<src_2012>         grid      (rdc_100m) := poly2grid(geometry, rdc_100m);
			attribute<procent>	bouwkosten_grensgebieden : [0.96,0.96,1,1,1,1,1,0.96,1,1,1,0.96,1,0.96,0.96,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];
			attribute<procent>	bouwkosten_grensgebieden_grid  (rdc_100m) := bouwkosten_grensgebieden[grid];
			attribute<uint32>   corop_code := id(.) + 1;
			
			attribute<float32>  avg_prijsm2_in2012 := rjoin(corop_code, /Brondata/NVM/Avg_prijsm2_perCOROP_in2012/corop[uint32], /Brondata/NVM/Avg_prijsm2_perCOROP_in2012/avg_pm2[float32]);
		}
	}
	container gemeenten
	{
		container gem_src
		{
			unit<uint32> j2019 
			:	StorageName     = "%AltSourceDataDir%/CBS/2019/gem_2019.fss"
			,	StorageReadOnly = "true"
			{
				attribute<geometries/rdc> geometry (poly);
				attribute<string>         label: DialogType = "LabelText";
				attribute<string>          name                  := replace(label, '/', '_', '-', '_', ' ', '_','(','',')','','â','a','ú','','''','',',','');
				attribute<.>              grid   (rdc_100m);
				attribute<string>         code;
				attribute<string>         GM_CODE  := 'GM'+code;
				attribute<string>         statcode := GM_CODE;
				attribute<bool>           IsUrbanCore      := IsDefined(rlookup(GM_CODE, UrbanCores/GM_CODE));
				attribute<bool>           IsUrbanCore_grid (rdc_100m) := IsUrbanCore[grid];
				attribute<geometries/rdc> GewogenAdressenCentroid;
				
				unit<uint32> UrbanCores  := ='subset('+AsList('GM_CODE == '+quote(UrbanCores_list/GM_CODE)+' ','||')+')'
				, 	Descr = "Op basis van CBS Grootstedelijke Agglomeraties 2015"
				{    
					attribute<geometries/rdc>    geometry (poly)                      := ../geometry[nr_OrgEntity];
					attribute<geometries/rdc_mm> geometry_mm (poly)                := geometry[geometries/rdc_mm];
					attribute<string>         GM_CODE                              := ../GM_CODE[nr_OrgEntity];
					attribute<string>         label                                := ../label[nr_OrgEntity]; //, DialogType = "LabelText";
					attribute<UrbanCores_list/Region_uq>         Region_rel        := rjoin(GM_CODE, UrbanCores_list/GM_CODE, UrbanCores_list/Region_rel);
					attribute<Agglomeration_uq>  Agglomeration_rel := rjoin(GM_CODE, UrbanCores_list/GM_CODE, UrbanCores_list/Agglomeration_rel);
					attribute<string>                            Region            := UrbanCores_list/Region_uq/values[Region_rel];
					attribute<string>                            Agglomeration     := Agglomeration_uq/values[Agglomeration_rel];
				}
				
				unit<uint32> Agglomeration_uq := unique(UrbanCores_list/Agglomeration)
				{
					attribute<string>            name             := replace(values, '/', '_', ' ', '_');
					attribute<string>            Label            := name, DialogType = "LabelText";
					attribute<geometries/rdc_mm> Geometry_mm  (poly) := partitioned_union_polygon(UrbanCores/geometry_mm, UrbanCores/Agglomeration_rel);
					attribute<geometries/rdc>    Geometry     (poly) := geometry_mm[geometries/rdc];
					
					unit<uint32> sub := subset(id(.) > 4)
					{
						attribute<string>            name             := ../name[nr_OrgEntity];
						attribute<string>            Label            := ../Label[nr_OrgEntity];
						attribute<geometries/rdc_mm> Geometry_mm  (poly) := ../Geometry_mm[nr_OrgEntity];
						attribute<geometries/rdc>    Geometry     (poly) := ../Geometry[nr_OrgEntity];
					}
				}
				
				unit<uint32> UrbanCores_list : NrOfRows = 64
				{
					attribute<string>       code              := Elements/Text[value(UInt32(ID(.))* nrAttr + 0, Elements)];
					attribute<string>       Region            := Elements/Text[value(UInt32(ID(.))* nrAttr + 1, Elements)];
					attribute<string>       Agglomeration     := Elements/Text[value(UInt32(ID(.))* nrAttr + 2, Elements)];
					attribute<string>       GM_CODE           := 'GM'+code;
					attribute<uint32>        Region_rel        := rlookup(Region, Region_uq/values);
					attribute<uint32>        Agglomeration_rel := rlookup(Agglomeration, Agglomeration_uq/values);
					
					unit<uint32> Region_uq        := unique(Region);
				
					parameter<uint32> nrAttr := 3;
					unit<uint32> Elements  := Range(uint32, 0, nrAttr*#.)
					{	
						attribute<string> Text : 
						[
						//	,code  ,region
							'0327','Randstad','Amersfoort'
							,'0505','Randstad','Dordrecht'
							,'0523','Randstad','Dordrecht'
							,'0610','Randstad','Dordrecht'
							,'0590','Randstad','Dordrecht'
							,'0642','Randstad','Dordrecht'
							,'0397','Randstad','Haarlem'
							,'0377','Randstad','Haarlem'
							,'0603','Randstad','Den Haag'
							,'1916','Randstad','Den Haag'
							,'0629','Randstad','Den Haag'
							,'0599','Randstad','Rotterdam'
							,'0518','Randstad','Den Haag'
							,'0546','Randstad','Leiden'
							,'0392','Randstad','Haarlem'
							,'0363','Randstad','Amsterdam'
							,'1904','Randstad','Utrecht'
							,'0307','Randstad','Amersfoort'
							,'0344','Randstad','Utrecht'
							,'0479','Randstad','Amsterdam'
							,'0431','Randstad','Amsterdam'
							,'0362','Randstad','Amsterdam'
							,'0384','Randstad','Amsterdam'
							,'0880','Randstad','Amsterdam'
							,'0415','Randstad','Amsterdam'
							,'0353','Randstad','Utrecht'
							,'0356','Randstad','Utrecht'
							,'0547','Randstad','Leiden'
							,'0626','Randstad','Leiden'
							,'0579','Randstad','Leiden'
							,'0537','Randstad','Leiden'
							,'0556','Randstad','Rotterdam'
							,'0622','Randstad','Rotterdam'
							,'0606','Randstad','Rotterdam'
							,'0502','Randstad','Rotterdam'
							,'0542','Randstad','Rotterdam'
							,'0489','Randstad','Rotterdam'
							,'1930','Randstad','Rotterdam'
							,'1883','South East','Sittard/Geleen'
							,'0935','South East','Maastricht'
							,'0917','South East','Heerlen'
							,'0971','South East','Sittard/Geleen'
							,'0888','South East','Sittard/Geleen'
							,'0899','South East','Heerlen'
							,'0882','South East','Heerlen'
							,'0928','South East','Heerlen'
							,'0796','South','Den Bosch'
							,'0855','South','Tilburg'
							,'0758','South','Breda'
							,'0772','South','Eindhoven'
							,'0785','South','Tilburg'
							,'0865','South','Den Bosch'
							,'0848','South','Eindhoven'
							,'1771','South','Eindhoven'
							,'0866','South','Eindhoven'
							,'0861','South','Eindhoven'
							,'0153','East','Enschede'
							,'0193','East','Zwolle'
							,'0200','East','Apeldoorn'
							,'0202','East','Arnhem'
							,'0268','East','Nijmegen'
							,'0277','East','Arnhem'
							,'0014','North','Groningen'
							,'0080','North','Leeuwarden'
						];
					}
				}
			}
		
			unit<uint32> j2017 // hierin zijn gemeentes NIET uniek, door zee strook...
			:	StorageName     = "%AltSourceDataDir%/CBS/2017/gem_2017.shp"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<geometries/rdc> geometry (polygon) ;
				attribute<string>         label     := statnaam;
				attribute<.>              grid   (rdc_100m) := poly2grid(geometry, rdc_100m);
			}
	
			unit<uint32> j2016 // hierin zijn gemeentes NIET uniek, door zee strook...
			:	StorageName     = "%AltSourceDataDir%/CBS/2016/gem_2016.shp"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<geometries/rdc> geometry (polygon) ;
				attribute<string>         label := GM_NAAM;
				attribute<.>              grid   (rdc_100m) := poly2grid(geometry, rdc_100m);
			}
			
			unit<uint32> j2015 // hierin zijn gemeentes NIET uniek, door zee strook...
			:	StorageName     = "%AltSourceDataDir%/CBS/2015/gem_2015.shp"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<geometries/rdc>  geometry (poly);
				attribute<string>          label                 := GM_NAAM;
				attribute<.>               grid (rdc_100m) := poly2grid(geometry, rdc_100m);
				attribute<regios/MRA/MRA8> MRA8_rel              := rjoin(name, regios/MRA/GemMRA8/gem_name, regios/MRA/GemMRA8/MRA8_rel);
				
				attribute<string>          name                  := replace(label, '/', '_', '-', '_', ' ', '_');

			}
	
			unit<uint32> j2012 // hierin zijn gemeentes NIET uniek, door zee strook...
			:	StorageName     = "%AltSourceDataDir%/CBS/2012/gem_2012.shp"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<geometries/rdc> geometry (polygon) ;
				attribute<string>         GM_CODE;
			}
		}
		
		container gem_2012 := MakeUniqueGemeenteWithCounts(Brondata/regios/gemeenten/gem_src/j2012
		// , Brondata/BAG/snapshots/vbos/y2012/src/woon
		);
		

		template MakeUniqueGemeenteWithCounts: isHidden = "True"
		{
			// begin case parameter(s)
			unit<uint32> gem_src;
			unit<uint32> vbo_src;
			// end case parameter

			attribute<gem_src> gem_src_rel (gem_src) := rlookup(gem_src/GM_CODE, gem_uq/values);

			unit<uint32> gem_uq := unique(gem_src/GM_CODE)
			,	StorageType    = "gdal.vect"
			{
				attribute<geometries/rdc> geometry (polygon) := partitioned_union_polygon(ipolygon(gem_src/geometry),gem_src_rel)[geometries/rdc];
		
				attribute<uint32>		id				:= id(.);
				attribute<string> 		name  				:= rjoin(values, gem_src/GM_CODE, gem_src/GM_NAAM);
				attribute<string> 		label 				:= name;
				attribute<string>		GM_CODE			:= rjoin(values, gem_src/GM_CODE, gem_src/GM_CODE);
				attribute<.> 		grid   (rdc_100m)		:= poly2grid(geometry, rdc_100m);
				attribute<.>   		buurt_gem_rel (regios/buurten/src_2012) := point_in_polygon(regios/buurten/src_2012/buurt_centroid, geometry);
				attribute<.>   		pc4_gem_rel	 (regios/Postcode_gebieden/Postcode4) := point_in_polygon(regios/Postcode_gebieden/Postcode4/pc4_centroid, 	regios/gemeenten/gem_2012/gem_uq/geometry);
				
				attribute<string>       gem_code  := replace(GM_CODE, 'GM000', '', 'GM00', '', 'GM0', '', 'GM', '');

				// attribute<.> gem_uq_rel (vbo_src) := point_in_polygon(vbo_src/geometry, gem_uq/geometry);

				// attribute<uint32> count_metwoonfunctie_enCBSStatus := pcount(gem_uq_rel);
		
				// container count_per_type_woonpand :=
					// for_each_nedv(
						// typeringen/type_woonpand/name
						// , 'sum(vbo_src/woonpand_rel == ' + string(id(typeringen/type_woonpand)) + '[typeringen/type_woonpand] ? 1 : 0, gem_uq_rel)'
						// , .
						// , uint32
					// );
					
				attribute<procent>	bouwkosten_wadden (gem_uq) := 
					switch(
						case(id == 35, 1.08[procent])
						,case(id == 24, 1.08[procent])
						,case(id == 37, 1.08[procent])
						,case(id == 38, 1.08[procent])
						,case(id == 171, 1.08[procent])
						,(1)[procent]
					);
				
				attribute<procent>	bouwkosten_wadden_grid  (rdc_100m) := bouwkosten_wadden[grid];
			}
		}
	}
	container NVM
	{
		unit<uint32> src 
		:	StorageName     = "%AltSourceDataDir%/CBS/NVMregios.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc> geometry (polygon) ;
			attribute<string>         label := NVMREG_NAA ;
			attribute<.>              grid   (rdc_100m) := poly2grid(geometry, rdc_100m);
		}
	}
	container buurten
	{
		unit<uint32> src_2012
		:	StorageName     = "%AltSourceDataDir%/CBS/2012/buurt_2012.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc>                     geometry (polygon);
			attribute<string>                             label                      := BU_NAAM;
			attribute<.>                                  grid (rdc_100m)      := poly2grid(geometry, rdc_100m);
			// attribute<uint32>                             woz                        := rjoin(BU_CODE, woz_buurt/woz_2012/CODERING, uint32(woz_buurt/woz_2012/GEMIDDELDE_WONINGWAARDE));
			attribute<geometries/rdc>                     buurt_centroid (src_2012)  := centroid_or_mid(geometry);
			attribute<regios/gemeenten/gem_2012/gem_uq>   buurt_gem_rel              := point_in_polygon(buurt_centroid, regios/gemeenten/gem_2012/gem_uq/geometry);
			attribute<uint32>                             id                         := id(.);
		}
		
		unit<uint32> src_2016
		:	StorageName     = "%AltSourceDataDir%/CBS/2016/buurt_2016.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc>   geometry (polygon);
			attribute<string>           label                     := BU_NAAM ;
			attribute<.>                grid (rdc_100m)     := poly2grid(geometry, rdc_100m);
			attribute<uint32>           woz                       := rjoin(BU_CODE, woz_buurt/woz_2016/CODERING, uint32(woz_buurt/woz_2016/GEMIDDELDE_WONINGWAARDE));
		}
		unit<uint32> src_2019
		:	StorageName     = "%AltSourceDataDir%/CBS/2019/buurt_2019_v1.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc>   geometry (polygon);
			attribute<string>           label                     := BU_NAAM ;
			attribute<.>                grid (rdc_100m)     := poly2grid(geometry, rdc_100m);
			
			unit<uint32> IsLand := subset(WATER == 'NEE')
			{
				attribute<geometries/rdc>      geometry (poly) := ../geometry[nr_OrgEntity];
				parameter<geometries/rdc_mm>   union (poly) := union_polygon(geometry[geometries/rdc_mm]);
				attribute<.>                   grid (rdc_100m)     := poly2grid(geometry, rdc_100m);
			}
		}
	}
	container wijken
	{
		unit<uint32> src_2012 
		:	StorageName     = "%AltSourceDataDir%/CBS/2012/wijk_2012.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc>   geometry  (polygon) ;
			attribute<string>           label                      := WK_NAAM ;
			attribute<.>                grid      (rdc_100m) := poly2grid(geometry, rdc_100m);
			// attribute<uint32>           woz                        := rjoin(WK_CODE, woz_buurt/woz_2012/CODERING, uint32(woz_buurt/woz_2012/GEMIDDELDE_WONINGWAARDE));
		}
		unit<uint32> src_2016 
		:	StorageName     = "%AltSourceDataDir%/CBS/2016/wijk_2016.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc>   geometry  (polygon) ;
			attribute<string>           label                      := WK_NAAM ;
			attribute<.>                grid      (rdc_100m) := poly2grid(geometry, rdc_100m);
			// attribute<uint32>           woz                        := rjoin(WK_CODE, woz_buurt/woz_2016/CODERING, uint32(woz_buurt/woz_2016/GEMIDDELDE_WONINGWAARDE));
		}
		unit<uint32> src_2018 
		:	StorageName     = "%AltSourceDataDir%/CBS/2018/wijk_2018.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	SyncMode        = "none"
		{
			attribute<geometries/rdc>   geometry  (polygon) ;
			attribute<string>           label                      := WK_NAAM ;
			attribute<string>           WK_NAAM;
			attribute<string>           WK_CODE;
			attribute<.>                grid      (rdc_100m) := poly2grid(geometry, rdc_100m);
			
			attribute<uint32>            Kerncijfers_rel := rlookup(WK_CODE, CBS_kerncijfers/gwb_code_10);
			
			attribute<int32>             P_LEEGSW        := CBS_kerncijfers/P_LEEGSW[int32][Kerncijfers_rel];
			attribute<int32>             p_koopw         := CBS_kerncijfers/p_koopw[int32][Kerncijfers_rel];
			attribute<int32>             p_huurw         := CBS_kerncijfers/p_huurw[int32][Kerncijfers_rel];
			attribute<int32>             p_wcorpw        := CBS_kerncijfers/p_wcorpw[int32][Kerncijfers_rel];
			attribute<int32>             g_ink_po        := CBS_kerncijfers/g_ink_po[int32][Kerncijfers_rel];// Gemiddeld inkomen per inkomensontvanger 
			attribute<int32>             g_woz           := CBS_kerncijfers/g_woz[int32][Kerncijfers_rel];
			
			unit<uint32> CBS_kerncijfers 
			:	StorageName     = "%AltSourceDataDir%/CBS/2018/kerncijfers-wijken-2018.csv"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			,	SyncMode = "all"
			{
			}
		}
		
		unit<uint32> Read_Wijk2019_shp 
		:	StorageName     = "%AltSourceDataDir%/CBS/2019/wijk_2019_v1.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc>   geometry  (polygon) ;
			attribute<string>           GM_NAAM;
			attribute<string>           WK_NAAM;
		}
		
		unit<uint32>  Make_Wijk2019 := Read_Wijk2019_shp
		, StorageName = "%AltSourceDataDir%/CBS/2019/wijk_2019.fss"
		, DialogData  = "Polygons"
		, DialogType  = "Map"
		{
			attribute<geometries/rdc> geometry (poly) := Read_Wijk2019_shp/geometry;
			attribute<string>    GM_NAAM         := Read_Wijk2019_shp/GM_NAAM;
			attribute<string>    WK_NAAM         := Read_Wijk2019_shp/WK_NAAM;
		}
		
		unit<uint32> src_2019
		: 	StorageName = "%AltSourceDataDir%/CBS/2019/wijk_2019.fss"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc>   geometry  (poly);
			attribute<string>           GM_NAAM;
			attribute<string>           WK_NAAM;
			
			attribute<geometries/rdc>   centroid                   := centroid_or_mid(geometry);
			attribute<string>           label                      := WK_NAAM ;
			attribute<.>                grid      (rdc_100m) := poly2grid(geometry, rdc_100m);
			attribute<uint32>           aggl_rel                   := point_in_polygon(centroid, /Brondata/regios/gemeenten/gem_src/j2019/Agglomeration_uq/Geometry);

			unit<uint32> BuurtInAggl := subset(IsDefined(aggl_rel))
			{
				attribute<geometries/rdc>   geometry  (poly)  := ../geometry[nr_OrgEntity];
				attribute<string>           label             := ../label[nr_OrgEntity];
				attribute<string>           GM_NAAM           := ../GM_NAAM[nr_OrgEntity];
				attribute<string>           buurt_name        := replace(label, '/', '_', '-', '_', ' ', '_', '.', '', 'â', 'a', '&', 'en', '(', '', ')', '', ',', '_', '''\', '', 'é', 'e');
				attribute<string>           gem_name          := replace(GM_NAAM, '/', '_', '-', '_', ' ', '_', '.', '', 'â', 'a', '&', 'en', '(', '', ')', '', ',', '_', '''\', '', 'é', 'e');
				
				attribute<string>           name := gem_name + "_" + buurt_name;
				container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);

			}
		}
	}
	container Postcode_gebieden
	{
		container impl
		{
			unit<uint32> Read_PC6_shape
			:	StorageName     = "%AltSourceDataDir%/CBS/pc6_tm2019_shp/pc6_xy_tm2020.shp"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<rdc>             geometry;
				attribute<string>               postcode6;
			}
			
			unit<uint32> Read_PC6_shape_areas
			:	StorageName     = "%AltSourceDataDir%/CBS/pc6_tm2019_shp/pc6_xy_tm2020_areas.shp"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<rdc>             geometry (poly);
				attribute<string>               PC6;
			}
			
			unit<uint32> Make_PC6_FSS := Read_PC6_shape
			,	StorageName     = "%AltSourceDataDir%/CBS/pc6_tm2019_shp/pc6_xy_tm2020.fss"
			{
				attribute<rdc>             geometry      := Read_PC6_shape/geometry;
				attribute<string>               PC6           := Read_PC6_shape/postcode6;
				attribute<string>               label         := PC6, DialogType = "LabelText";
			}
			
			unit<uint32> Make_PC6_areas_FSS := Read_PC6_shape_areas
			,	StorageName     = "%AltSourceDataDir%/CBS/pc6_tm2019_shp/pc6_xy_tm2020_areas.fss"
			{
				attribute<rdc>             geometry (poly) := Read_PC6_shape_areas/geometry;
				attribute<string>               PC6             := Read_PC6_shape_areas/PC6;
				attribute<string>               label           := PC6, DialogType = "LabelText";
				
				attribute<uint32>  nr_woningen := count(Brondata/BAG/Snapshots/VBOs/Y202001/Src/GebruiksdoelSets/woon/GebruiksdoelSet/geometry, Brondata/BAG/Snapshots/VBOs/Y202001/Src/GebruiksdoelSets/woon/GebruiksdoelSet/pc6_rel);
			}
			
			unit<uint32> Read_PC4_shape
			:	StorageName     = "%AltSourceDataDir%/CBS/pc6_tm2019_shp/pc4_xy_tm2020.shp"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<rdc>             geometry;
				attribute<string>               postcode4;
			}
			
			unit<uint32> Read_PC4_shape_areas
			:	StorageName     = "%AltSourceDataDir%/CBS/pc6_tm2019_shp/pc4_xy_tm2020_areas.shp"
			,	StorageType     = "gdal.vect"
			,	StorageReadOnly = "True"
			{
				attribute<rdc>             geometry (poly);
				attribute<string>               PC4;
			}
			
			unit<uint32> Make_PC4_FSS := Read_PC4_shape
			,	StorageName     = "%AltSourceDataDir%/CBS/pc6_tm2019_shp/pc4_xy_tm2020.fss"
			{
				attribute<rdc>             geometry      := Read_PC4_shape/geometry;
				attribute<string>               PC4           := Read_PC4_shape/postcode4;
				attribute<string>               label         := PC4, DialogType = "LabelText";
			}
			
			unit<uint32> Make_PC4_areas_FSS := Read_PC4_shape_areas
			,	StorageName     = "%AltSourceDataDir%/CBS/pc6_tm2019_shp/pc4_xy_tm2020_areas.fss"
			{
				attribute<rdc>             geometry (poly) := Read_PC4_shape_areas/geometry;
				attribute<string>               PC4             := Read_PC4_shape_areas/PC4;
				attribute<string>               label           := PC4, DialogType = "LabelText";
			}
		}
	
		unit<uint32> Postcode4_oud
		:	StorageName     = "%AltSourceDataDir%/CBS/PC4_shape.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<rdc>                  geometry  (polygon) ;
			attribute<string>               label                       := string(PC4) ;
			// attribute<.>                    grid      (rdc_100m)  := poly2grid(geometry, rdc_100m);
			attribute<rdc>                  pc4_centroid                := centroid_or_mid(geometry);
			// attribute<string>               GM_CODE                     := rjoin(pc4_gem_rel, BronData/regios/gemeenten/gem_2012/gem_uq/id, BronData/regios/gemeenten/gem_2012/gem_uq/GM_CODE);
			attribute<uint32>               id                          := id(.);
			attribute<string>               name                        := label;
			// attribute<regios/gemeenten/gem_2012/gem_uq>  pc4_gem_rel    := point_in_polygon(pc4_centroid, regios/gemeenten/gem_2012/gem_uq/geometry);
			
			// attribute<float32>              landprice := rjoin(name, Overig/landprice_pc4_2007/PC4code, Overig/landprice_pc4_2007/landprice);
			// attribute<float32>              landprice_grid (rdc_100m) := landprice[grid];
			
			attribute<float32>              pc4_price_coeff             := rjoin(id, uint32(Brondata/NVM/PC4_coefficients/ReadFSS/PC4), exp(float32(Brondata/NVM/PC4_coefficients/ReadFSS/estimate)));
			
		}
		// unit<uint32> Postcode6 
		// :	StorageName     = "%SourceDataDir%/CBS/PC6_shape.shp"
		// ,	StorageType     = "gdal.vect"
		// ,	StorageReadOnly = "True"
		// {
			// attribute<rdc>   	geometry  (polygon) ;
			// attribute<string>           		label                      	:= POSTCODE ;
			// attribute<Postcode6>         	grid      (rdc_100m) 	:= poly2grid(geometry, rdc_100m);
		// }
		
		
		unit<uint32> Postcode6
		:	StorageName     = "%AltSourceDataDir%/CBS/pc6_tm2019_shp/pc6_xy_tm2020.fss"
		,	StorageReadOnly = "True"
		{
			attribute<rdc>             geometry;
			attribute<string>          PC6;
			attribute<string>          label                 : DialogType = "LabelText";
			attribute<.>               grid (rdc_100m) := poly2grid(geometry, rdc_100m);
		}
		
		unit<uint32> Postcode6_areas
		:	StorageName     = "%AltSourceDataDir%/CBS/pc6_tm2019_shp/pc6_xy_tm2020_areas.fss"
		,	StorageReadOnly = "True"
		{
			attribute<rdc>             geometry (poly);
			attribute<string>               PC6;
			attribute<string>               label : DialogType = "LabelText";
		}
		
		
		unit<uint32> Postcode4
		:	StorageName     = "%AltSourceDataDir%/CBS/pc6_tm2019_shp/pc4_xy_tm2020.fss"
		,	StorageReadOnly = "True"
		{
			attribute<rdc>             geometry;
			attribute<string>               PC4;
			attribute<string>               label : DialogType = "LabelText";
		}
		
		unit<uint32> Postcode4_areas
		:	StorageName     = "%AltSourceDataDir%/CBS/pc6_tm2019_shp/pc4_xy_tm2020_areas.fss"
		,	StorageReadOnly = "True"
		{
			attribute<rdc>                        geometry (poly);
			attribute<string>                     PC4;
			attribute<string>                     label                   : DialogType = "LabelText";
			
			attribute<.>                          grid  (rdc_100m)  := poly2grid(geometry, rdc_100m);
			attribute<rdc>                        pc4_centroid            := centroid_or_mid(geometry);
			attribute<string>                     GM_CODE                 := rjoin(pc4_gem_rel, gemeenten/gem_2012/gem_uq/id, gemeenten/gem_2012/gem_uq/GM_CODE);
			attribute<string>                     name                    := label;
			attribute<gemeenten/gem_2012/gem_uq>  pc4_gem_rel             := point_in_polygon(pc4_centroid, gemeenten/gem_2012/gem_uq/geometry);
			attribute<regios/MRA/MRA1>                   mra_rel                 := point_in_polygon(pc4_centroid, regios/MRA/MRA1/Geometry);
			
			attribute<float32>                    landprice               := rjoin(name, Overig/landprice_pc4_2007/PC4code, Overig/landprice_pc4_2007/landprice);
			attribute<float32>                    landprice_grid (rdc_100m) := landprice[grid];
			
			unit<uint32> MRA := subset(IsDefined(MRA_rel))
			{
				attribute<rdc>      geometry (poly) := ../geometry[nr_OrgEntity];
				attribute<string>   PC4             := ../PC4[nr_OrgEntity];
			}
		}

	}
	
	container MRA
	{
		unit<uint32> GemMRA8
		: StorageName = "%AltSourceDataDir%/CBS/RegioindelingMRA2016.csv"
		, StorageType = "gdal.vect"
		, StorageReadOnly = "True"
		{
			attribute<string>  gem_name  := replace(gemeente, '/', '_', '-', '_', ' ', '_');
			attribute<string>  MRA8_name := replace(regio, '/', '_', '-', '_', ' ', '_');
			attribute<MRA8>    MRA8_rel  := rjoin(MRA8_name, MRA8/name, id(MRA8));
		}
		
		unit<uint32> MRA8 := unique(GemMRA8/MRA8_name)
		{
			attribute<ipoint>    geometry0 (poly) := partitioned_union_polygon(ipolygon(regios/gemeenten/gem_src/j2015/Geometry), regios/gemeenten/gem_src/j2015/MRA8_rel);
			attribute<rdc>       geometry (poly)  := geometry0[rdc];
			attribute<string>    name             := replace(values, '/', '_', '-', '_', ' ', '_');
			attribute<string>    Label            := name, DialogType = "LabelText";
			attribute<MRA1_src>      MRA1_rel         := const(0[MRA1_src], .);
		}
		
		unit<uint32> MRA1_src: NrOfRows = 1
		,	StorageName = "%AltSourceDataDir%/CBS/RegioindelingMRA2016.fss"
		{
			attribute<ipoint>    geometry0 (poly) := partitioned_union_polygon(ipolygon(MRA8/geometry0), MRA8/MRA1_rel), DisableStorage = "true";
			attribute<rdc>       geometry (poly)  := geometry0[rdc];
			attribute<string>    name             : ['MRA'];
			attribute<string>    Label            := name, DialogType = "LabelText";
			attribute<.>         MRA1_rel         := const(0[.], .), DisableStorage = "true";
		}
		
		unit<uint32> MRA1
		:	StorageName = "%AltSourceDataDir%/CBS/RegioindelingMRA2016.fss"
		,	StorageReadOnly = "true"
		{
			attribute<rdc>       geometry (poly);
			attribute<string>    Label : DialogType = "LabelText";
		}
	
	}
}
